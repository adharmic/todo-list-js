{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAe;AAC3C,4DAA4D,+CAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;;AC1B9B;AACA;AACA;AACA;AACA;AACmC;AACM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwkCAAkC,kDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qDAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU;;;;;;;;;;ACvXzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;ACrBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;UCP1B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN+C;AACR;AACvC;AACmC;AACM;AACzC;AACA,2BAA2B,wDAAc;AACzC,uBAAuB,oDAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAQ;AAC/B,wBAAwB,kDAAQ;AAChC;AACA,0BAA0B,qDAAW;AACrC;AACA;AACA;AACA;AACA;AACA,oB","sources":["webpack:///./src/storage-manager.js","webpack:///./src/dom-handler.js","webpack:///./src/todo-item.js","webpack:///./src/todo-project.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/index.js"],"sourcesContent":["// Handle storage and retrieval from localstorage.\r\n// Should also handle current list of projects\r\n// Required methods:\r\n// 1.  \r\n\r\nimport starterProjects from './defaultItems.json';\r\n\r\nclass StorageManager {\r\n    constructor() {\r\n        // Check localstorage for project list\r\n        if  (localStorage.getItem(\"projects\") === null) {\r\n            // No localstorage, so load default data\r\n            this.projects = starterProjects;\r\n            localStorage.setItem(\"projects\", JSON.stringify(starterProjects));\r\n        }\r\n        else {\r\n            // Localstorage found, so load it!\r\n            this.projects = JSON.parse(localStorage.getItem(\"projects\"));\r\n        }\r\n    }\r\n\r\n    updateLocalStorage() {\r\n        localStorage.setItem(\"projects\", JSON.stringify(this.projects));\r\n    }\r\n}\r\n\r\nexport default StorageManager;  ","// TODO: \r\n// Implement priority system\r\n// Implement completion system\r\n// Color list items based on priority\r\n\r\nimport TodoItem from \"./todo-item\";\r\nimport TodoProject from \"./todo-project\";\r\n\r\nclass DOMHandler {\r\n    constructor(storageManager) {\r\n        this.storageManager = storageManager;\r\n\r\n        // DOM element for list of projects\r\n        this.projectListElem = document.querySelector('.groups');\r\n\r\n        // DOM element for list of todo items\r\n        this.todoItemsElem = document.querySelector('.todo-items');\r\n\r\n        this.currentProject = 0;\r\n\r\n        // Open first project in list\r\n        this.renderProjectList();\r\n        this.openProject(this.currentProject);\r\n        document.querySelector('.project-item')?.classList.add('selected-project');\r\n    }\r\n\r\n    renderProjectList() {\r\n        let addProjectButton = document.querySelector('.add-project-header');\r\n        addProjectButton.onclick = (e) => {\r\n            this.showProjectModal(null);\r\n        }\r\n\r\n        this.projectListElem.replaceChildren();\r\n        let i = 0;\r\n\r\n        for (let i = 0; i < this.storageManager.projects.length; i++) {\r\n            let projectElem = document.createElement('li');\r\n            projectElem.classList.add('project-item');\r\n\r\n            let projectNameElem = document.createElement('h2');\r\n            projectNameElem.textContent = this.storageManager.projects[i].name;\r\n\r\n            let projectButtons = document.createElement('div');\r\n            projectButtons.classList.add('project-buttons');\r\n\r\n            let editProjectButton = document.createElement('div');\r\n            editProjectButton.classList.add(\"project-button\");\r\n\r\n            let editProjectIcon = document.createElement('i');\r\n            editProjectIcon.classList.add(\"fa\");\r\n            editProjectIcon.classList.add(\"fa-pencil\")\r\n\r\n            editProjectButton.appendChild(editProjectIcon);\r\n\r\n            editProjectButton.onclick = (e) => {\r\n                e.stopPropagation();\r\n                this.showProjectModal(i);\r\n            }\r\n\r\n            let deleteProjectButton = document.createElement('div');\r\n            deleteProjectButton.classList.add(\"project-button\");\r\n\r\n            let deleteProjectIcon = document.createElement('i');\r\n            deleteProjectIcon.classList.add(\"fa\");\r\n            deleteProjectIcon.classList.add(\"fa-trash\");\r\n\r\n            deleteProjectButton.appendChild(deleteProjectIcon);\r\n\r\n            deleteProjectButton.onclick = (e) => {\r\n                e.stopPropagation();\r\n                this.storageManager.projects.splice(i, 1);\r\n                this.storageManager.updateLocalStorage();\r\n                this.renderProjectList();\r\n                this.openProject(0);\r\n            }\r\n\r\n            projectButtons.appendChild(editProjectButton);\r\n            projectButtons.appendChild(deleteProjectButton);\r\n\r\n            // projectElem.appendChild(editProjectButton);\r\n            // projectElem.appendChild(deleteProjectButton);\r\n            projectElem.appendChild(projectButtons);\r\n            projectElem.appendChild(projectNameElem);\r\n\r\n            projectElem.onclick = () => {\r\n                document.querySelector('.selected-project')?.classList.remove('selected-project');\r\n                this.openProject(i);\r\n                projectElem.classList.add('selected-project');\r\n            }\r\n\r\n            this.projectListElem.appendChild(projectElem);\r\n        }\r\n    }\r\n\r\n    openProject(index) {\r\n        // Remove active project class from previous project\r\n\r\n        // Add active projcet class to newly opened project\r\n\r\n        this.currentProject = index;\r\n        this.todoItemsElem.replaceChildren();\r\n        let currProjItems = this.storageManager.projects[index]?.items;\r\n\r\n        let titleElem = document.querySelector('.project-title');\r\n        titleElem.textContent = this.storageManager.projects[index]?.name;\r\n\r\n        let addItemButton = document.querySelector('.taskbar');\r\n        addItemButton.onclick = (e) => {\r\n            this.showTodoModal(null, this.storageManager.projects[this.currentProject]?.items);\r\n        }\r\n\r\n        // Loop through todo items in currProj\r\n        for (let i = 0; i < currProjItems.length; i++) {\r\n            this.todoItemsElem.appendChild(this.getTodoElement(currProjItems[i], i));\r\n        }\r\n    }\r\n\r\n    getTodoElement(item, index) {\r\n        let itemCard = document.createElement('div');\r\n        itemCard.classList.add('todo-item');\r\n\r\n        let prioIndicator = document.createElement('div');\r\n        prioIndicator.classList.add('prio-indicator');\r\n        \r\n        if (item.prio == 1) {\r\n            prioIndicator.classList.add('prio1-indicator');\r\n        }\r\n        if (item.prio == 2) {\r\n            prioIndicator.classList.add('prio2-indicator');\r\n        }\r\n        if (item.prio == 3) {\r\n            prioIndicator.classList.add('prio3-indicator');\r\n        }\r\n\r\n        let completedCheck = document.createElement(\"input\");\r\n        completedCheck.setAttribute('type', 'checkbox');\r\n        completedCheck.classList.add('completed-checkbox');\r\n\r\n        completedCheck.onclick = (e) => {\r\n            let currProjItems = this.storageManager.projects[this.currentProject]?.items;\r\n            item.completed = completedCheck.checked;\r\n            currProjItems[index] = item;\r\n            this.storageManager.updateLocalStorage();\r\n            this.openProject(this.currentProject);\r\n            // itemCard.classList.add('completed-todo');\r\n        }\r\n\r\n        completedCheck.checked = item.completed;\r\n        if (item.completed) {\r\n            itemCard.classList.add('completed-todo');\r\n        }\r\n\r\n        let itemTitle = document.createElement('h2');\r\n        itemTitle.textContent = item.title;\r\n        itemTitle.classList.add('item-title-text');\r\n\r\n        let itemDesc = document.createElement('h2');\r\n        itemDesc.textContent = item.desc;\r\n\r\n        let dueDate = document.createElement('h2');\r\n        dueDate.textContent = item.dueDate;\r\n        dueDate.classList.add('due-date-text');\r\n\r\n        let itemActions = document.createElement('div');\r\n        itemActions.classList.add('item-actions');\r\n\r\n        let editItemButton = document.createElement('div');\r\n        editItemButton.classList.add(\"project-button\");\r\n\r\n        let editItem = document.createElement('i');\r\n        editItem.classList.add('fa');\r\n        editItem.classList.add('fa-pencil');\r\n        editItemButton.onclick = (e) => {\r\n            this.showTodoModal(index, this.storageManager.projects[this.currentProject].items);\r\n            console.log(`editing item ${index}`);\r\n        }\r\n\r\n        editItemButton.appendChild(editItem);\r\n\r\n        let deleteItemButton = document.createElement('div');\r\n        deleteItemButton.classList.add(\"project-button\");\r\n\r\n        let deleteItem = document.createElement('i');\r\n        deleteItem.classList.add('fa');\r\n        deleteItem.classList.add('fa-trash');\r\n        deleteItemButton.onclick = (e) => {\r\n            this.storageManager.projects[this.currentProject].items.splice(index, 1);\r\n            this.openProject(this.currentProject);\r\n            this.storageManager.updateLocalStorage();\r\n        }\r\n\r\n        deleteItemButton.appendChild(deleteItem);\r\n\r\n        itemActions.appendChild(editItemButton);\r\n        itemActions.appendChild(deleteItemButton);\r\n\r\n        itemCard.appendChild(prioIndicator);\r\n        itemCard.appendChild(completedCheck);\r\n        itemCard.appendChild(itemTitle);\r\n        itemCard.appendChild(dueDate);\r\n        itemCard.appendChild(itemActions);\r\n\r\n        return itemCard;\r\n    }\r\n\r\n    hideTodoModal() {\r\n        let overlay = document.querySelector('.overlay');\r\n        overlay.classList.add('hidden');\r\n\r\n        let modal = document.querySelector('.new-item-modal');\r\n        modal.classList.add('hidden');\r\n    }\r\n\r\n    showTodoModal(index = null, items) {\r\n        let overlay = document.querySelector('.overlay');\r\n        overlay.classList.remove('hidden');\r\n\r\n        let modal = document.querySelector('.new-item-modal');\r\n        modal.classList.remove('hidden');\r\n\r\n        let nameBox = document.querySelector('#item-name');\r\n        let descBox = document.querySelector('#item-desc');\r\n        let dateBox = document.querySelector('#item-date');\r\n        let prioBox1 = document.querySelector('#prio1');\r\n        let prioBox2 = document.querySelector('#prio2');\r\n        let prioBox3 = document.querySelector('#prio3');\r\n        let notesBox = document.querySelector('#item-notes');\r\n\r\n        let submit = document.querySelector('#todo-submit');\r\n        let cancel = document.querySelector('#todo-cancel');\r\n\r\n        cancel.onclick = (e) => {\r\n            e.preventDefault();\r\n            this.hideTodoModal();\r\n        }\r\n\r\n        if (index !== null) {\r\n            let currTodo = items[index];\r\n            nameBox.value = currTodo.title;\r\n            descBox.value = currTodo.desc;\r\n            dateBox.value = currTodo.dueDate;\r\n            notesBox.value = currTodo.notes;\r\n\r\n            console.dir(prioBox1);\r\n\r\n            switch (currTodo.prio) {\r\n                case 1:\r\n                    prioBox1.checked = true;\r\n                    break;\r\n                case 2:\r\n                    prioBox2.checked = true;\r\n                    break;\r\n                case 3:\r\n                    prioBox3.checked = true;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            submit.onclick = (e) => {\r\n                // TODO: VALIDATE ENTRY\r\n                e.preventDefault();\r\n                currTodo.title = nameBox.value;\r\n                currTodo.desc = descBox.value;\r\n                currTodo.dueDate = dateBox.value;\r\n                currTodo.notes = notesBox.value;\r\n\r\n                if (prioBox1.checked) {\r\n                    currTodo.prio = 1;\r\n                }\r\n\r\n                if (prioBox2.checked) {\r\n                    currTodo.prio = 2;\r\n                }\r\n\r\n                if (prioBox3.checked) {\r\n                    currTodo.prio = 3;\r\n                }\r\n\r\n                this.storageManager.updateLocalStorage();\r\n                this.openProject(this.currentProject);\r\n                this.hideTodoModal();\r\n            };\r\n        }\r\n        else {\r\n            nameBox.value = \"\";\r\n            descBox.value = \"\";\r\n            dateBox.value = \"\";\r\n            notesBox.value = \"\";\r\n            prioBox1.checked = 0;\r\n            prioBox2.checked = 0;\r\n            prioBox3.checked = 0;\r\n            submit.onclick = (e) => {\r\n                // TODO: VALIDATE ENTRY\r\n                e.preventDefault();\r\n                let prio = 0;\r\n                if (prioBox1.checked) {\r\n                    prio = 1;\r\n                }\r\n    \r\n                if (prioBox2.checked) {\r\n                    prio = 2;\r\n                }\r\n    \r\n                if (prioBox3.checked) {\r\n                    prio = 3;\r\n                }\r\n                let newTodo = new TodoItem(nameBox.value, descBox.value, dateBox.value, prio, notesBox.value);\r\n                items.unshift(newTodo);\r\n                this.openProject(this.currentProject);\r\n                this.storageManager.updateLocalStorage();\r\n                this.hideTodoModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    showProjectModal(index = null) {\r\n        let overlay = document.querySelector('.overlay');\r\n        overlay.classList.remove('hidden');\r\n\r\n        let modal = document.querySelector('.modal-wrapper');\r\n        modal.classList.remove('hidden');\r\n\r\n        let projectBox = document.querySelector('#project-name');\r\n        let submit = document.querySelector('#project-submit');\r\n        let cancel = document.querySelector('#project-cancel');\r\n\r\n        cancel.onclick = (e) => {\r\n            e.preventDefault();\r\n            this.hideProjectModal();\r\n        }\r\n\r\n        if (index !== null) {\r\n            projectBox.value = this.storageManager.projects[index].name;\r\n\r\n            submit.onclick = (e) => {\r\n                // TODO: VALIDATE ENTRY\r\n                e.preventDefault();\r\n\r\n                this.storageManager.projects[index].name = projectBox.value;\r\n                this.storageManager.updateLocalStorage();\r\n                this.renderProjectList();\r\n                // this.openProject(this.currentProject);\r\n                if (index == this.currentProject) {\r\n                    let titleText = document.querySelector('.project-title');\r\n                    titleText.textContent = projectBox.value;\r\n                }\r\n                this.hideProjectModal();\r\n            }\r\n        }\r\n        else {\r\n            projectBox.value = \"\";\r\n            submit.onclick = (e) => {\r\n                // TODO: VALIDATE ENTRY\r\n                e.preventDefault();\r\n\r\n                this.storageManager.projects.push(new TodoProject(projectBox.value, []));\r\n                this.storageManager.updateLocalStorage();\r\n                this.renderProjectList();\r\n                this.hideProjectModal();\r\n                this.openProject(this.storageManager.projects.length - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    hideProjectModal() {\r\n        let overlay = document.querySelector('.overlay');\r\n        overlay.classList.add('hidden');\r\n\r\n        let modal = document.querySelector('.modal-wrapper');\r\n        modal.classList.add('hidden');\r\n    }\r\n};\r\n\r\nexport default DOMHandler;","// To-do item should have:\r\n// title: name of to-do item\r\n// desc: what needs to be done to complete the todo\r\n// dueDate: when the to-do item should be done\r\n// priority: how important this item is compared to others\r\n// -- let's do 3 prio levels: low, medium, high.\r\n// -- Medium prio should be default\r\n// notes: added details for the to-do item\r\n// checklist: ???\r\n\r\nclass TodoItem {\r\n    constructor(title, desc, dueDate, prio = 1, notes = \"\") {\r\n        this.title = title;\r\n        this.desc = desc;\r\n        this.dueDate = dueDate;\r\n        this.prio = prio;\r\n        this.notes = notes;\r\n        this.completed = false;\r\n    } \r\n}\r\n\r\nexport default TodoItem;","class TodoProject {\r\n    constructor(name, items) {\r\n        this.name = name;\r\n        this.items = items;\r\n    }\r\n}\r\n\r\nexport default TodoProject;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import StorageManager from \"./storage-manager\";\r\nimport DOMHandler from \"./dom-handler\";\r\n\r\nimport TodoItem from \"./todo-item\";\r\nimport TodoProject from \"./todo-project\";\r\n\r\nconst storageManager = new StorageManager();\r\nconst domHandler = new DOMHandler(storageManager); \r\n\r\nfunction startApp() {\r\n    const element = document.createElement('div');\r\n\r\n    element.innerHTML = 'Hello!!';\r\n\r\n    return element;\r\n\r\n    // Loop through JSON to populate projects and list items\r\n    // What project should open by default?\r\n\r\n    // Create DOM Handler. If localstorage has data, use that as projectList. If not, use defaultItems.\r\n}\r\n\r\n// startApp();\r\n\r\nfunction createTestData() {\r\n    let projects = [];\r\n    let testItem = new TodoItem(\"Be Silly!\", \"reach 500 silliness points\", \"tomorrow\", 2, \"Try doing something wacky\");\r\n    let testItem2 = new TodoItem(\"Be GOOFY!\", \"reach 500 goofiness points\", \"thursday\", 2, \"Try doing something spontaneous\");\r\n    let testItems = [testItem, testItem2];\r\n    let testProject = new TodoProject(\"My Day\", testItems);\r\n    projects.push(testProject);\r\n    localStorage.setItem(\"projects\", JSON.stringify(projects));\r\n    console.log(JSON.stringify(projects));\r\n}\r\n\r\n// createTestData();"],"names":[],"sourceRoot":""}